plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "forge-${minecraft_version}${version_suffix}${mod_version}"
group = mod_group_id

base {
    archivesName = mod_id
}

// Java Language Version
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // Official Minecraft Mappings for 1.20.1
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true


    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            // Data generation Setup
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // JEI Maven
    maven { url "https://maven.blamejared.com"}

    // Jade Maven
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // Jitpack Maven
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Minecraft Dependency
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI Dependencies
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // Jade Dependency
    implementation fg.deobf("curse.maven:jade-324717:4768593")

    // Engineer's Library Dependency
    implementation 'com.github.TimeshipModding:Engineers-Library:Forge-1.20.1snap-v0.01'
}

// gradle.properties entries
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            // Minecraft Versions
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,

            // Forge Versions
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,

            // Mod Information
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version, version_suffix: version_suffix,
            mod_authors: mod_authors, mod_description: mod_description, mod_credits: mod_credits,

            // Dependency Information
            jei_version: jei_version, top_version: top_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}